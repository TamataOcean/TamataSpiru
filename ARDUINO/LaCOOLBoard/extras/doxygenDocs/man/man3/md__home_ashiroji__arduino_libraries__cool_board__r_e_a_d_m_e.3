.TH "md__home_ashiroji__arduino_libraries__cool_board__r_e_a_d_m_e" 3 "Tue Sep 19 2017" "CoolBoardAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_ashiroji__arduino_libraries__cool_board__r_e_a_d_m_eREADME 
 \- 
.SS "What is this repository for?"
.PP
Quick summary :
.PP
\fBCoolBoard\fP API is a set of libraries and wrappers to simplify the access and usage of all the capabilites of the \fBCoolBoard\fP\&.
.PP
Version : 1\&.0
.PP
.SS "How do I get set up?"
.PP
Configuration :
.PP
1/Download and Install the Arduino IDE (https://www.arduino.cc/en/Main/Software )
.PP
2/Download and Add the ESP8266 Hardware extension to Arduino (https://github.com/esp8266/Arduino )
.PP
/!\\ If you already have Arduino IDE and the ESP8266 Hardware extension , make sure you upgrade them to the latest version\&.
.PP
3/Download and Add the \fBCoolBoard\fP Library set to the Arduino IDE :
.PP
a)First Method :
.PP
-Open the Arduino IDE
.PP
-Go to the 'Sketch' Menu
.PP
-Include Library > Manage Libraries\&.
.PP
-Search for \fBCoolBoard\fP
.PP
-Install
.PP
-Restart Arduino IDE
.PP
b)Second Method (if you have a CoolBoard\&.zip file ):
.PP
-Open the Arduino IDE
.PP
-Go to the 'Sketch' Menu
.PP
-Include Library > 'Add \&.ZIP Library'\&.
.PP
-Search for CoolBoard\&.zip
.PP
-Click Open
.PP
-Restart Arduino IDE
.PP
c)Third Method (if you have the bitbucket/github link):
.PP
-Open Arduino IDE > File > Preferences
.PP
-Check the 'SketchBook Location' path
.PP
-Go to the Arduino/libraries folder (if it doesn't exist, create one )
.PP
-Clone the repo there ( git clone 'bitbucket/github link' )
.PP
-Restart Arduino IDE
.PP
4/Download ESP8266FS Tool (https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html#uploading-files-to-file-system)
.PP
5/Optional but Heavily Recommended : Download the ESP8266 Exception Decoder ( download link :https://github.com/me-no-dev/EspExceptionDecoder/releases/tag/1.0.6) Install guide : https://github.com/me-no-dev/EspExceptionDecoder
.PP
Dependencies :
.PP
You need the following libraries to be able to use the \fBCoolBoard\fP API:
.PP
-ArduinoJson(https://github.com/bblanchon/ArduinoJson)
.PP
-NeoPixelBus(https://github.com/Makuna/NeoPixelBus)
.PP
-TimeLib(https://github.com/PaulStoffregen/Time)
.PP
-DS1337RTC(https://github.com/etrombly/DS1337RTC)
.PP
-DallasTemperature(https://github.com/milesburton/Arduino-Temperature-Control-Library)
.PP
Configuration Files :
.PP
-The \fBCoolBoard\fP API heavily uses the SPIFFS for storing and retreiving configuration and data files
.PP
This is a description of the configuration files and what are they used for :
.PP
1/coolBoardConfig\&.json :
.PP
logInterval: The time Interval to wait,in seconds, between two logs
.PP
ireneActive: Put this flag to 1(true) if you are using the \fBIrene3000\fP module
.PP
jetpackActive:Put this flag to 1(true) if you are using the \fBJetpack\fP modue
.PP
externalSensorsActive: Put this flag to 1(true) if you are using a supported external Sensor
.PP
sleepActive: Put this flag to 1(true) if you want your \fBCoolBoard\fP to enable Sleep mode In Sleep Mode : your \fBCoolBoard\fP will do the following : -readSensors -activate Actors(if any) -log the data -check for updates -go to sleep for logInterval period of time
.PP
userActive:Put this flag to 1(true) if you want your \fBCoolBoard\fP to collect userData : userName \fBCoolBoard\fP MAC Address TimeStamp
.PP
manual /!\\ : Put this flag to 1(true) to control to turn on/off your actors and bypass your initial actors configuration 
.PP
.nf
         Be Careful with this mode!!.

         When this mode is actif , the CoolBoard will not restart automatically to apply any new configuration sent via
         the update method.

         Restarting the coolBoard when in manual mode will deactivate all the actors!

         Never forget to reset this to 0(false) to go back to normal mode!

.fi
.PP
.PP
2/coolBoardLedConfig\&.json:
.PP
ledActive: Put this flag to 1(true) if you want to have Light Effects from the on Board LED
.PP
3/coolBoardSensorsConfig\&.json:
.PP
temperature : Put this flag to 1(true) if you want to collect the Temperature using the \fBBME280\fP Sensor
.PP
humidity : Put this flag to 1(true) if you want to collect the humidity using the \fBBME280\fP Sensor
.PP
pressure : Put this flag to 1(true) if you want to collect the pressure using the \fBBME280\fP Sensor
.PP
visible : Put this flag to 1(true) if you want to collect the visible light index using the SI114X Sensor
.PP
ir : Put this flag to 1(true) if you want to collect the infrared light index using the SI114X Sensor
.PP
uv : Put this flag to 1(true) if you want to collect the ultraviolet light index using the SI114X Sensor
.PP
vbat : Put this flag to 1(true) if you want to collect the battery voltage
.PP
soilMoisture : Put this flag to 1(true) if you want to collect the soil Moisture
.PP
4/externalSensorsConfig\&.json:
.PP
sensorsNumber: the number of supported external sensors you connect to the coolBoard
.PP
reference: the reference of a supported external sensor(e\&.g \fBNDIR_I2C\fP , DallasTemperature )
.PP
type: the type of the measurments you are making (e\&.g : co2, temperature,voltage \&.\&.\&. )
.PP
address : the sensor's address , if it has one (e\&.g : \fBNDIR_I2C\fP CO2 sensor's address is 77 )
.PP
5/irene3000Config\&.json:
.PP
waterTemp\&.active: Put this flag to 1(true) in order to use the temperature sensor connected to the \fBIrene3000\fP
.PP
phProbe\&.active: Put this flag to 1(true) in order to use the ph sensor connected to the \fBIrene3000\fP
.PP
adc2\&.active: Put this flag to 1(true) in order to use the extra ADC input of the \fBIrene3000\fP
.PP
adc2\&.gain: this is the value of the gain applied to the extra ADC input of the \fBIrene3000\fP
.PP
adc2\&.type: the type of the measurments you are making (e\&.g : co2, temperature,voltage \&.\&.\&. )
.PP
6/jetPackConfig\&.json and coolBoardActorConfig\&.json:
.PP
Act[i]\&.actif: Put this flag to 1(true) in order to use the jetpack output Nï¿½i (0\&.\&.7)
.PP
Act[i]\&.inverted:Put this flag to 1(true) if the actor is inverted (e\&.g : a cooler is activated when Temp>TempMax) Put this flag to 0(false) if the actor is notInverted(e\&.g : a heater is activated when Temp<TempMin)
.PP
Act[i]\&.temporal:Put this flag to 1(true) if you want the actor to be actif of a period of time , then inactif for another period of time\&.
.PP
Act[i]\&.type:['primaryType','secondaryType'] : this array contains the priamryType and the secondaryType of the actor -The primaryType is the type associated to the sensors\&. (e\&.g : primaryType : 'Temperature' is associated to the sensor of type 'Temperature')\&. -It can also be empty , in case of PURE temporal actors
.PP
.PP
.nf
                                             -The secondaryType is only used in temporal mode.
                                             it can be : -"" (empty):the actor will be on for a period of timeHigh ms
                                                                     the actor will be off for a period of timeLow ms

                                                         -"hour" :the actor will be on when the Hour is equal or greater then hourHigh
                                                                  the actor will be off when the Hour is equal or greater then hourLow

                                                         -"minute":the actor will be on when the Minute is equal or greater then minuteHigh
                                                                  :the actor will be off when the Minute is equal or greater then minuteLow

                                                         -"hourMinute":the actor will be on when : Hour == hourHigh AND Minute >= minuteHigh
                                                                                                   Hour > hourHigh
                                                                       the actor will be off when : Hour == hourLow AND Minute >= minuteLow
                                                                                                    Hour>hourLow

                                              /!\ NOTE  that if both primaryType and secondaryType are valid : the actor will be in
                                                 mixed mode : it will need to valid both Time and measurment conditions to go on or off

Act[i].low:[rangeLow,timeLow,hourLow,minuteLow] : this array contains the values previously described:
                                                  -rangeLow is the minimum of the range at which 
                                                  to activate(deactivate in inverted mode) the actor

                                                  -timeLow is the time spent off in temporal mode

                                                  -hourLow is the hour to turn off the actor when secondaryType is hour or hourMinute

                                                  -minuteLow is the minute to turn off the actor when secondaryType is minute or hourMinute


Act[i].high:[rangeHigh,timeHigh,hourHigh,minuteHigh]: this array contains the values previously described:
                                                  -rangeHigh is the maximum of the range at which 
                                                  to deactivate(activate in inverted mode) the actor

                                                  -timeHigh is the time spent on in temporal mode

                                                  -hourHigh is the hour to turn on the actor when secondaryType is hour or hourMinute

                                                  -minuteHigh is the minute to turn on the actor when secondaryType is minute or hourMinute


   Note that the coolBoardActorConfig.json contains only one Actor.
.fi
.PP
.PP
7/mqttConfig\&.json:
.PP
mqttServer: This is the mqttServer (ip/url) address
.PP
user: This is the userId
.PP
bufferSize: This is the memory allocated to the mqtt buffer in bytes
.PP
inTopic : this is the topic that the coolBoard subscribes to (receives updates from )
.PP
outTopic : this is the topic that the coolBoard will publish to\&.
.PP
8/rtcConfig\&.json:
.PP
timeServer: NTP server ip address
.PP
localPort: port used to make the NTP request to update the time
.PP
9/wifiConfig\&.json:
.PP
wifiCount: the number of wifis saved in this configuration file
.PP
timeOut:access point timeout in seconds\&.
.PP
nomad: put this flag to 1(true) to activate nomad mode\&. in nomad mode : the coolBoard will only try to connect to known WiFis\&. if it fails it will NOT lunch the access point\&.
.PP
How to run the exemples : 
.PP
.nf
-Open Arduino IDE 

-File > Exemples > CoolBoard

-Select the Exemple you want

-Flash it

-Flash the SPIFFS ( this is only required for the CoolBoardExemple, CoolBoardFarmExemple and CoolBoardStationExemple)

-Open The Serial Monitor

-Sit back and Enjoy!

.fi
.PP
.PP
.SS "Contribution guidelines"
.PP
For minor fixes of code and documentation, please go ahead and submit a pull request\&.
.PP
Larger changes (rewriting parts of existing code from scratch, adding new functions to the core, adding new libraries) should generally be discussed by opening an issue first\&.
.PP
Feature branches with lots of small commits (especially titled 'oops', 'fix typo', 'forgot to add file', etc\&.) should be squashed before opening a pull request\&. At the same time, please refrain from putting multiple unrelated changes into a single pull request\&.
.PP
.SS "License and credits"
.PP
All files under src/internal are modified versions of existing libraries\&. All Credit of the original work goes to their respective authors\&.
.PP
All Other files are provided as is under the MIT license :
.PP
Copyright (c) 2017 La Cool Co SAS
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE\&.
.PP
We can only gurantee that we did our best to have everything working on our side\&.
.PP
.SS "Who do I talk to?"
.PP
If you encounter a problem , have a good idea or just want to talk
.PP
Please open an issue, a pull request or send us an email :
.PP
La Cool Co team@lacool.co 
